"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bundler = void 0;
const interface_1 = require("./interface");
const fs = require("fs");
const path = require("path");
const cp = require("child_process");
class Client {
    constructor() {
        this._setConfig = this._createConfig();
    }
    get config() {
        return this._config;
    }
    set _setConfig(config) {
        this._config = config;
    }
    _createConfig() {
        const cli = new interface_1.CLI();
        if (cli.active)
            return cli.options;
        const arg = new interface_1.JRC();
        if (arg.active)
            return arg.options;
        throw Error('No target was selected');
    }
}
class Bundler extends Client {
    constructor() {
        super();
        this._bundle();
    }
    get files() {
        const filePath = this.config.target;
        return this.getPath(path.resolve(filePath));
    }
    getPath(filePath) {
        return fs.readdirSync(path.resolve(filePath));
    }
    async _outFile() {
        await fs.mkdirSync(this.config._outFile, { recursive: true });
    }
    async _install(file) {
        console.log('------');
        const _file = this.getPath(file);
        const _cmd = `npm install --only=prod --prefix`;
        await cp.execSync(`${_cmd} ${_file}`);
        return this;
    }
    // private async _
    async _bundle() {
        await this._outFile();
        this.files.map(async (file) => {
            // await this._install(file);
        });
    }
}
exports.Bundler = Bundler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbGliL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUF1QztBQUd2Qyx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLG9DQUFvQztBQUVwQyxNQUFNLE1BQU07SUFXVDtRQUNHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFWRCxJQUFjLE1BQU07UUFDakIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFZLFVBQVUsQ0FBQyxNQUFvQjtRQUN4QyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBTU8sYUFBYTtRQUNsQixNQUFNLEdBQUcsR0FBRyxJQUFJLGVBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksR0FBRyxDQUFDLE1BQU07WUFBRSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFFbkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxlQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLEdBQUcsQ0FBQyxNQUFNO1lBQUUsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDO1FBRW5DLE1BQU0sS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNIO0FBRUQsTUFBYSxPQUFRLFNBQVEsTUFBTTtJQUNoQztRQUNHLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxJQUFZLEtBQUs7UUFDZCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTyxPQUFPLENBQUMsUUFBZ0I7UUFDN0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU8sS0FBSyxDQUFDLFFBQVE7UUFDbkIsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVPLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBWTtRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsTUFBTSxJQUFJLEdBQUcsa0NBQWtDLENBQUM7UUFDaEQsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdEMsT0FBTyxJQUFJLENBQUM7SUFDZixDQUFDO0lBRUQsa0JBQWtCO0lBQ1YsS0FBSyxDQUFDLE9BQU87UUFDbEIsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQzNCLDZCQUE2QjtRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Q0FDSDtBQW5DRCwwQkFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKUkMsIENMSSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB7IE9wdGlvblZhbHVlcyB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGNwIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5jbGFzcyBDbGllbnQge1xuICAgcHJpdmF0ZSBfY29uZmlnOiBPcHRpb25WYWx1ZXM7XG5cbiAgIHByb3RlY3RlZCBnZXQgY29uZmlnKCk6IE9wdGlvblZhbHVlcyB7XG4gICAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xuICAgfVxuXG4gICBwcml2YXRlIHNldCBfc2V0Q29uZmlnKGNvbmZpZzogT3B0aW9uVmFsdWVzKSB7XG4gICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICB9XG5cbiAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fc2V0Q29uZmlnID0gdGhpcy5fY3JlYXRlQ29uZmlnKCk7XG4gICB9XG5cbiAgIHByaXZhdGUgX2NyZWF0ZUNvbmZpZygpOiBPcHRpb25WYWx1ZXMge1xuICAgICAgY29uc3QgY2xpID0gbmV3IENMSSgpO1xuICAgICAgaWYgKGNsaS5hY3RpdmUpIHJldHVybiBjbGkub3B0aW9ucztcblxuICAgICAgY29uc3QgYXJnID0gbmV3IEpSQygpO1xuICAgICAgaWYgKGFyZy5hY3RpdmUpIHJldHVybiBhcmcub3B0aW9ucztcblxuICAgICAgdGhyb3cgRXJyb3IoJ05vIHRhcmdldCB3YXMgc2VsZWN0ZWQnKTtcbiAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJ1bmRsZXIgZXh0ZW5kcyBDbGllbnQge1xuICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fYnVuZGxlKCk7XG4gICB9XG5cbiAgIHByaXZhdGUgZ2V0IGZpbGVzKCkge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSB0aGlzLmNvbmZpZy50YXJnZXQ7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQYXRoKHBhdGgucmVzb2x2ZShmaWxlUGF0aCkpO1xuICAgfVxuXG4gICBwcml2YXRlIGdldFBhdGgoZmlsZVBhdGg6IHN0cmluZykge1xuICAgICAgcmV0dXJuIGZzLnJlYWRkaXJTeW5jKHBhdGgucmVzb2x2ZShmaWxlUGF0aCkpO1xuICAgfVxuXG4gICBwcml2YXRlIGFzeW5jIF9vdXRGaWxlKCkge1xuICAgICAgYXdhaXQgZnMubWtkaXJTeW5jKHRoaXMuY29uZmlnLl9vdXRGaWxlLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgIH1cblxuICAgcHJpdmF0ZSBhc3luYyBfaW5zdGFsbChmaWxlOiBzdHJpbmcpOiBQcm9taXNlPEJ1bmRsZXI+IHtcbiAgICAgIGNvbnNvbGUubG9nKCctLS0tLS0nKTtcbiAgICAgIGNvbnN0IF9maWxlID0gdGhpcy5nZXRQYXRoKGZpbGUpO1xuICAgICAgY29uc3QgX2NtZCA9IGBucG0gaW5zdGFsbCAtLW9ubHk9cHJvZCAtLXByZWZpeGA7XG4gICAgICBhd2FpdCBjcC5leGVjU3luYyhgJHtfY21kfSAke19maWxlfWApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICB9XG5cbiAgIC8vIHByaXZhdGUgYXN5bmMgX1xuICAgcHJpdmF0ZSBhc3luYyBfYnVuZGxlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgYXdhaXQgdGhpcy5fb3V0RmlsZSgpO1xuXG4gICAgICB0aGlzLmZpbGVzLm1hcChhc3luYyAoZmlsZSkgPT4ge1xuICAgICAgICAgLy8gYXdhaXQgdGhpcy5faW5zdGFsbChmaWxlKTtcbiAgICAgIH0pO1xuICAgfVxufVxuIl19